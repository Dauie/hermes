#ifndef HERMESFLATSCHEMA_BUILDER_H
#define HERMESFLATSCHEMA_BUILDER_H

/* Generated by flatcc 0.5.3-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef HERMESFLATSCHEMA_READER_H
#include "hermesFlatSchema_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __Hermes_Job_Ops_formal_args ,\
  uint64_t v0, uint32_t v1, uint32_t v2, uint32_t v3,\
  uint32_t v4, uint32_t v5, uint32_t v6, uint32_t v7,\
  uint32_t v8, uint32_t v9, uint32_t v10, uint32_t v11,\
  uint32_t v12, uint32_t v13, uint32_t v14, uint16_t v15,\
  uint16_t v16, uint8_t v17, uint8_t v18, uint8_t v19, uint8_t v20
#define __Hermes_Job_Ops_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11,\
  v12, v13, v14, v15,\
  v16, v17, v18, v19, v20
static inline Hermes_Job_Ops_t *Hermes_Job_Ops_assign(Hermes_Job_Ops_t *p,
  uint64_t v0, uint32_t v1, uint32_t v2, uint32_t v3,
  uint32_t v4, uint32_t v5, uint32_t v6, uint32_t v7,
  uint32_t v8, uint32_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, uint32_t v13, uint32_t v14, uint16_t v15,
  uint16_t v16, uint8_t v17, uint8_t v18, uint8_t v19, uint8_t v20)
{ p->bitops = v0; p->min_rtt_timeo = v1; p->init_rtt_timeo = v2; p->max_rtt_timeo = v3;
  p->host_timeo = v4; p->scan_delay = v5; p->max_scan_delay = v6; p->min_packet_rate = v7;
  p->max_packet_rate = v8; p->max_retries = v9; p->min_parallel = v10; p->max_parallel = v11;
  p->min_hostgroup = v12; p->max_hostgroup = v13; p->spoofed_srcaddr = v14; p->spoofed_srcport = v15;
  p->rpayload_len = v16; p->fragment_mtu = v17; p->ip_ttl = v18; p->thread_count = v19;
  p->verbose_level = v20;
  return p; }
static inline Hermes_Job_Ops_t *Hermes_Job_Ops_copy(Hermes_Job_Ops_t *p, const Hermes_Job_Ops_t *p2)
{ p->bitops = p2->bitops; p->min_rtt_timeo = p2->min_rtt_timeo; p->init_rtt_timeo = p2->init_rtt_timeo; p->max_rtt_timeo = p2->max_rtt_timeo;
  p->host_timeo = p2->host_timeo; p->scan_delay = p2->scan_delay; p->max_scan_delay = p2->max_scan_delay; p->min_packet_rate = p2->min_packet_rate;
  p->max_packet_rate = p2->max_packet_rate; p->max_retries = p2->max_retries; p->min_parallel = p2->min_parallel; p->max_parallel = p2->max_parallel;
  p->min_hostgroup = p2->min_hostgroup; p->max_hostgroup = p2->max_hostgroup; p->spoofed_srcaddr = p2->spoofed_srcaddr; p->spoofed_srcport = p2->spoofed_srcport;
  p->rpayload_len = p2->rpayload_len; p->fragment_mtu = p2->fragment_mtu; p->ip_ttl = p2->ip_ttl; p->thread_count = p2->thread_count;
  p->verbose_level = p2->verbose_level;
  return p; }
static inline Hermes_Job_Ops_t *Hermes_Job_Ops_assign_to_pe(Hermes_Job_Ops_t *p,
  uint64_t v0, uint32_t v1, uint32_t v2, uint32_t v3,
  uint32_t v4, uint32_t v5, uint32_t v6, uint32_t v7,
  uint32_t v8, uint32_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, uint32_t v13, uint32_t v14, uint16_t v15,
  uint16_t v16, uint8_t v17, uint8_t v18, uint8_t v19, uint8_t v20)
{ flatbuffers_uint64_assign_to_pe(&p->bitops, v0); flatbuffers_uint32_assign_to_pe(&p->min_rtt_timeo, v1); flatbuffers_uint32_assign_to_pe(&p->init_rtt_timeo, v2); flatbuffers_uint32_assign_to_pe(&p->max_rtt_timeo, v3);
  flatbuffers_uint32_assign_to_pe(&p->host_timeo, v4); flatbuffers_uint32_assign_to_pe(&p->scan_delay, v5); flatbuffers_uint32_assign_to_pe(&p->max_scan_delay, v6); flatbuffers_uint32_assign_to_pe(&p->min_packet_rate, v7);
  flatbuffers_uint32_assign_to_pe(&p->max_packet_rate, v8); flatbuffers_uint32_assign_to_pe(&p->max_retries, v9); flatbuffers_uint32_assign_to_pe(&p->min_parallel, v10); flatbuffers_uint32_assign_to_pe(&p->max_parallel, v11);
  flatbuffers_uint32_assign_to_pe(&p->min_hostgroup, v12); flatbuffers_uint32_assign_to_pe(&p->max_hostgroup, v13); flatbuffers_uint32_assign_to_pe(&p->spoofed_srcaddr, v14); flatbuffers_uint16_assign_to_pe(&p->spoofed_srcport, v15);
  flatbuffers_uint16_assign_to_pe(&p->rpayload_len, v16); p->fragment_mtu = v17; p->ip_ttl = v18; p->thread_count = v19;
  p->verbose_level = v20;
  return p; }
static inline Hermes_Job_Ops_t *Hermes_Job_Ops_copy_to_pe(Hermes_Job_Ops_t *p, const Hermes_Job_Ops_t *p2)
{ flatbuffers_uint64_copy_to_pe(&p->bitops, &p2->bitops); flatbuffers_uint32_copy_to_pe(&p->min_rtt_timeo, &p2->min_rtt_timeo); flatbuffers_uint32_copy_to_pe(&p->init_rtt_timeo, &p2->init_rtt_timeo); flatbuffers_uint32_copy_to_pe(&p->max_rtt_timeo, &p2->max_rtt_timeo);
  flatbuffers_uint32_copy_to_pe(&p->host_timeo, &p2->host_timeo); flatbuffers_uint32_copy_to_pe(&p->scan_delay, &p2->scan_delay); flatbuffers_uint32_copy_to_pe(&p->max_scan_delay, &p2->max_scan_delay); flatbuffers_uint32_copy_to_pe(&p->min_packet_rate, &p2->min_packet_rate);
  flatbuffers_uint32_copy_to_pe(&p->max_packet_rate, &p2->max_packet_rate); flatbuffers_uint32_copy_to_pe(&p->max_retries, &p2->max_retries); flatbuffers_uint32_copy_to_pe(&p->min_parallel, &p2->min_parallel); flatbuffers_uint32_copy_to_pe(&p->max_parallel, &p2->max_parallel);
  flatbuffers_uint32_copy_to_pe(&p->min_hostgroup, &p2->min_hostgroup); flatbuffers_uint32_copy_to_pe(&p->max_hostgroup, &p2->max_hostgroup); flatbuffers_uint32_copy_to_pe(&p->spoofed_srcaddr, &p2->spoofed_srcaddr); flatbuffers_uint16_copy_to_pe(&p->spoofed_srcport, &p2->spoofed_srcport);
  flatbuffers_uint16_copy_to_pe(&p->rpayload_len, &p2->rpayload_len); p->fragment_mtu = p2->fragment_mtu; p->ip_ttl = p2->ip_ttl; p->thread_count = p2->thread_count;
  p->verbose_level = p2->verbose_level;
  return p; }
static inline Hermes_Job_Ops_t *Hermes_Job_Ops_assign_from_pe(Hermes_Job_Ops_t *p,
  uint64_t v0, uint32_t v1, uint32_t v2, uint32_t v3,
  uint32_t v4, uint32_t v5, uint32_t v6, uint32_t v7,
  uint32_t v8, uint32_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, uint32_t v13, uint32_t v14, uint16_t v15,
  uint16_t v16, uint8_t v17, uint8_t v18, uint8_t v19, uint8_t v20)
{ flatbuffers_uint64_assign_from_pe(&p->bitops, v0); flatbuffers_uint32_assign_from_pe(&p->min_rtt_timeo, v1); flatbuffers_uint32_assign_from_pe(&p->init_rtt_timeo, v2); flatbuffers_uint32_assign_from_pe(&p->max_rtt_timeo, v3);
  flatbuffers_uint32_assign_from_pe(&p->host_timeo, v4); flatbuffers_uint32_assign_from_pe(&p->scan_delay, v5); flatbuffers_uint32_assign_from_pe(&p->max_scan_delay, v6); flatbuffers_uint32_assign_from_pe(&p->min_packet_rate, v7);
  flatbuffers_uint32_assign_from_pe(&p->max_packet_rate, v8); flatbuffers_uint32_assign_from_pe(&p->max_retries, v9); flatbuffers_uint32_assign_from_pe(&p->min_parallel, v10); flatbuffers_uint32_assign_from_pe(&p->max_parallel, v11);
  flatbuffers_uint32_assign_from_pe(&p->min_hostgroup, v12); flatbuffers_uint32_assign_from_pe(&p->max_hostgroup, v13); flatbuffers_uint32_assign_from_pe(&p->spoofed_srcaddr, v14); flatbuffers_uint16_assign_from_pe(&p->spoofed_srcport, v15);
  flatbuffers_uint16_assign_from_pe(&p->rpayload_len, v16); p->fragment_mtu = v17; p->ip_ttl = v18; p->thread_count = v19;
  p->verbose_level = v20;
  return p; }
static inline Hermes_Job_Ops_t *Hermes_Job_Ops_copy_from_pe(Hermes_Job_Ops_t *p, const Hermes_Job_Ops_t *p2)
{ flatbuffers_uint64_copy_from_pe(&p->bitops, &p2->bitops); flatbuffers_uint32_copy_from_pe(&p->min_rtt_timeo, &p2->min_rtt_timeo); flatbuffers_uint32_copy_from_pe(&p->init_rtt_timeo, &p2->init_rtt_timeo); flatbuffers_uint32_copy_from_pe(&p->max_rtt_timeo, &p2->max_rtt_timeo);
  flatbuffers_uint32_copy_from_pe(&p->host_timeo, &p2->host_timeo); flatbuffers_uint32_copy_from_pe(&p->scan_delay, &p2->scan_delay); flatbuffers_uint32_copy_from_pe(&p->max_scan_delay, &p2->max_scan_delay); flatbuffers_uint32_copy_from_pe(&p->min_packet_rate, &p2->min_packet_rate);
  flatbuffers_uint32_copy_from_pe(&p->max_packet_rate, &p2->max_packet_rate); flatbuffers_uint32_copy_from_pe(&p->max_retries, &p2->max_retries); flatbuffers_uint32_copy_from_pe(&p->min_parallel, &p2->min_parallel); flatbuffers_uint32_copy_from_pe(&p->max_parallel, &p2->max_parallel);
  flatbuffers_uint32_copy_from_pe(&p->min_hostgroup, &p2->min_hostgroup); flatbuffers_uint32_copy_from_pe(&p->max_hostgroup, &p2->max_hostgroup); flatbuffers_uint32_copy_from_pe(&p->spoofed_srcaddr, &p2->spoofed_srcaddr); flatbuffers_uint16_copy_from_pe(&p->spoofed_srcport, &p2->spoofed_srcport);
  flatbuffers_uint16_copy_from_pe(&p->rpayload_len, &p2->rpayload_len); p->fragment_mtu = p2->fragment_mtu; p->ip_ttl = p2->ip_ttl; p->thread_count = p2->thread_count;
  p->verbose_level = p2->verbose_level;
  return p; }
__flatbuffers_build_struct(flatbuffers_, Hermes_Job_Ops, 72, 8, Hermes_Job_Ops_identifier, Hermes_Job_Ops_type_identifier)

static const flatbuffers_voffset_t __Hermes_Job_Ip4rng_required[] = { 0 };
typedef flatbuffers_ref_t Hermes_Job_Ip4rng_ref_t;
static Hermes_Job_Ip4rng_ref_t Hermes_Job_Ip4rng_clone(flatbuffers_builder_t *B, Hermes_Job_Ip4rng_table_t t);
__flatbuffers_build_table(flatbuffers_, Hermes_Job_Ip4rng, 3)

static const flatbuffers_voffset_t __Hermes_Job_Prtrng_required[] = { 0 };
typedef flatbuffers_ref_t Hermes_Job_Prtrng_ref_t;
static Hermes_Job_Prtrng_ref_t Hermes_Job_Prtrng_clone(flatbuffers_builder_t *B, Hermes_Job_Prtrng_table_t t);
__flatbuffers_build_table(flatbuffers_, Hermes_Job_Prtrng, 3)

static const flatbuffers_voffset_t __Hermes_Job_Targetlist_required[] = { 0 };
typedef flatbuffers_ref_t Hermes_Job_Targetlist_ref_t;
static Hermes_Job_Targetlist_ref_t Hermes_Job_Targetlist_clone(flatbuffers_builder_t *B, Hermes_Job_Targetlist_table_t t);
__flatbuffers_build_table(flatbuffers_, Hermes_Job_Targetlist, 5)

static const flatbuffers_voffset_t __Hermes_Job_Portlist_required[] = { 0 };
typedef flatbuffers_ref_t Hermes_Job_Portlist_ref_t;
static Hermes_Job_Portlist_ref_t Hermes_Job_Portlist_clone(flatbuffers_builder_t *B, Hermes_Job_Portlist_table_t t);
__flatbuffers_build_table(flatbuffers_, Hermes_Job_Portlist, 5)

static const flatbuffers_voffset_t __Hermes_Job_job_required[] = { 0 };
typedef flatbuffers_ref_t Hermes_Job_job_ref_t;
static Hermes_Job_job_ref_t Hermes_Job_job_clone(flatbuffers_builder_t *B, Hermes_Job_job_table_t t);
__flatbuffers_build_table(flatbuffers_, Hermes_Job_job, 6)

#define __Hermes_Job_Ip4rng_formal_args , uint32_t v0, uint32_t v1, uint32_t v2
#define __Hermes_Job_Ip4rng_call_args , v0, v1, v2
static inline Hermes_Job_Ip4rng_ref_t Hermes_Job_Ip4rng_create(flatbuffers_builder_t *B __Hermes_Job_Ip4rng_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Hermes_Job_Ip4rng, Hermes_Job_Ip4rng_identifier, Hermes_Job_Ip4rng_type_identifier)

#define __Hermes_Job_Prtrng_formal_args , uint16_t v0, uint16_t v1, uint16_t v2
#define __Hermes_Job_Prtrng_call_args , v0, v1, v2
static inline Hermes_Job_Prtrng_ref_t Hermes_Job_Prtrng_create(flatbuffers_builder_t *B __Hermes_Job_Prtrng_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Hermes_Job_Prtrng, Hermes_Job_Prtrng_identifier, Hermes_Job_Prtrng_type_identifier)

#define __Hermes_Job_Targetlist_formal_args ,\
  uint32_t v0, uint32_t v1, uint32_t v2, flatbuffers_uint32_vec_ref_t v3, Hermes_Job_Ip4rng_vec_ref_t v4
#define __Hermes_Job_Targetlist_call_args ,\
  v0, v1, v2, v3, v4
static inline Hermes_Job_Targetlist_ref_t Hermes_Job_Targetlist_create(flatbuffers_builder_t *B __Hermes_Job_Targetlist_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Hermes_Job_Targetlist, Hermes_Job_Targetlist_identifier, Hermes_Job_Targetlist_type_identifier)

#define __Hermes_Job_Portlist_formal_args ,\
  uint16_t v0, uint16_t v1, uint16_t v2, flatbuffers_uint16_vec_ref_t v3, Hermes_Job_Prtrng_vec_ref_t v4
#define __Hermes_Job_Portlist_call_args ,\
  v0, v1, v2, v3, v4
static inline Hermes_Job_Portlist_ref_t Hermes_Job_Portlist_create(flatbuffers_builder_t *B __Hermes_Job_Portlist_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Hermes_Job_Portlist, Hermes_Job_Portlist_identifier, Hermes_Job_Portlist_type_identifier)

#define __Hermes_Job_job_formal_args ,\
  Hermes_Job_Ops_t *v0, Hermes_Job_Targetlist_ref_t v1, Hermes_Job_Portlist_ref_t v2, Hermes_Job_Portlist_ref_t v3, Hermes_Job_Portlist_ref_t v4, Hermes_Job_Portlist_ref_t v5
#define __Hermes_Job_job_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline Hermes_Job_job_ref_t Hermes_Job_job_create(flatbuffers_builder_t *B __Hermes_Job_job_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Hermes_Job_job, Hermes_Job_job_identifier, Hermes_Job_job_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, Hermes_Job_Ip4rng_size, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Hermes_Job_Ip4rng)
__flatbuffers_build_scalar_field(1, flatbuffers_, Hermes_Job_Ip4rng_start, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Hermes_Job_Ip4rng)
__flatbuffers_build_scalar_field(2, flatbuffers_, Hermes_Job_Ip4rng_end, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Hermes_Job_Ip4rng)

static inline Hermes_Job_Ip4rng_ref_t Hermes_Job_Ip4rng_create(flatbuffers_builder_t *B __Hermes_Job_Ip4rng_formal_args)
{
    if (Hermes_Job_Ip4rng_start(B)
        || Hermes_Job_Ip4rng_size_add(B, v0)
        || Hermes_Job_Ip4rng_start_add(B, v1)
        || Hermes_Job_Ip4rng_end_add(B, v2)) {
        return 0;
    }
    return Hermes_Job_Ip4rng_end(B);
}

static Hermes_Job_Ip4rng_ref_t Hermes_Job_Ip4rng_clone(flatbuffers_builder_t *B, Hermes_Job_Ip4rng_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Hermes_Job_Ip4rng_start(B)
        || Hermes_Job_Ip4rng_size_pick(B, t)
        || Hermes_Job_Ip4rng_start_pick(B, t)
        || Hermes_Job_Ip4rng_end_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Hermes_Job_Ip4rng_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Hermes_Job_Prtrng_size, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), Hermes_Job_Prtrng)
__flatbuffers_build_scalar_field(1, flatbuffers_, Hermes_Job_Prtrng_start, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), Hermes_Job_Prtrng)
__flatbuffers_build_scalar_field(2, flatbuffers_, Hermes_Job_Prtrng_end, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), Hermes_Job_Prtrng)

static inline Hermes_Job_Prtrng_ref_t Hermes_Job_Prtrng_create(flatbuffers_builder_t *B __Hermes_Job_Prtrng_formal_args)
{
    if (Hermes_Job_Prtrng_start(B)
        || Hermes_Job_Prtrng_size_add(B, v0)
        || Hermes_Job_Prtrng_start_add(B, v1)
        || Hermes_Job_Prtrng_end_add(B, v2)) {
        return 0;
    }
    return Hermes_Job_Prtrng_end(B);
}

static Hermes_Job_Prtrng_ref_t Hermes_Job_Prtrng_clone(flatbuffers_builder_t *B, Hermes_Job_Prtrng_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Hermes_Job_Prtrng_start(B)
        || Hermes_Job_Prtrng_size_pick(B, t)
        || Hermes_Job_Prtrng_start_pick(B, t)
        || Hermes_Job_Prtrng_end_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Hermes_Job_Prtrng_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Hermes_Job_Targetlist_total, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Hermes_Job_Targetlist)
__flatbuffers_build_scalar_field(1, flatbuffers_, Hermes_Job_Targetlist_ip_cnt, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Hermes_Job_Targetlist)
__flatbuffers_build_scalar_field(2, flatbuffers_, Hermes_Job_Targetlist_rng_cnt, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Hermes_Job_Targetlist)
__flatbuffers_build_vector_field(3, flatbuffers_, Hermes_Job_Targetlist_ip, flatbuffers_uint32, uint32_t, Hermes_Job_Targetlist)
__flatbuffers_build_table_vector_field(4, flatbuffers_, Hermes_Job_Targetlist_iprng, Hermes_Job_Ip4rng, Hermes_Job_Targetlist)

static inline Hermes_Job_Targetlist_ref_t Hermes_Job_Targetlist_create(flatbuffers_builder_t *B __Hermes_Job_Targetlist_formal_args)
{
    if (Hermes_Job_Targetlist_start(B)
        || Hermes_Job_Targetlist_total_add(B, v0)
        || Hermes_Job_Targetlist_ip_cnt_add(B, v1)
        || Hermes_Job_Targetlist_rng_cnt_add(B, v2)
        || Hermes_Job_Targetlist_ip_add(B, v3)
        || Hermes_Job_Targetlist_iprng_add(B, v4)) {
        return 0;
    }
    return Hermes_Job_Targetlist_end(B);
}

static Hermes_Job_Targetlist_ref_t Hermes_Job_Targetlist_clone(flatbuffers_builder_t *B, Hermes_Job_Targetlist_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Hermes_Job_Targetlist_start(B)
        || Hermes_Job_Targetlist_total_pick(B, t)
        || Hermes_Job_Targetlist_ip_cnt_pick(B, t)
        || Hermes_Job_Targetlist_rng_cnt_pick(B, t)
        || Hermes_Job_Targetlist_ip_pick(B, t)
        || Hermes_Job_Targetlist_iprng_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Hermes_Job_Targetlist_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Hermes_Job_Portlist_total, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), Hermes_Job_Portlist)
__flatbuffers_build_scalar_field(1, flatbuffers_, Hermes_Job_Portlist_ip_cnt, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), Hermes_Job_Portlist)
__flatbuffers_build_scalar_field(2, flatbuffers_, Hermes_Job_Portlist_rng_cnt, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), Hermes_Job_Portlist)
__flatbuffers_build_vector_field(3, flatbuffers_, Hermes_Job_Portlist_port, flatbuffers_uint16, uint16_t, Hermes_Job_Portlist)
__flatbuffers_build_table_vector_field(4, flatbuffers_, Hermes_Job_Portlist_prtrng, Hermes_Job_Prtrng, Hermes_Job_Portlist)

static inline Hermes_Job_Portlist_ref_t Hermes_Job_Portlist_create(flatbuffers_builder_t *B __Hermes_Job_Portlist_formal_args)
{
    if (Hermes_Job_Portlist_start(B)
        || Hermes_Job_Portlist_port_add(B, v3)
        || Hermes_Job_Portlist_prtrng_add(B, v4)
        || Hermes_Job_Portlist_total_add(B, v0)
        || Hermes_Job_Portlist_ip_cnt_add(B, v1)
        || Hermes_Job_Portlist_rng_cnt_add(B, v2)) {
        return 0;
    }
    return Hermes_Job_Portlist_end(B);
}

static Hermes_Job_Portlist_ref_t Hermes_Job_Portlist_clone(flatbuffers_builder_t *B, Hermes_Job_Portlist_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Hermes_Job_Portlist_start(B)
        || Hermes_Job_Portlist_port_pick(B, t)
        || Hermes_Job_Portlist_prtrng_pick(B, t)
        || Hermes_Job_Portlist_total_pick(B, t)
        || Hermes_Job_Portlist_ip_cnt_pick(B, t)
        || Hermes_Job_Portlist_rng_cnt_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Hermes_Job_Portlist_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, Hermes_Job_job_ops, Hermes_Job_Ops, 72, 8, Hermes_Job_job)
__flatbuffers_build_table_field(1, flatbuffers_, Hermes_Job_job_targets, Hermes_Job_Targetlist, Hermes_Job_job)
__flatbuffers_build_table_field(2, flatbuffers_, Hermes_Job_job_ports, Hermes_Job_Portlist, Hermes_Job_job)
__flatbuffers_build_table_field(3, flatbuffers_, Hermes_Job_job_syn_ports, Hermes_Job_Portlist, Hermes_Job_job)
__flatbuffers_build_table_field(4, flatbuffers_, Hermes_Job_job_ack_ports, Hermes_Job_Portlist, Hermes_Job_job)
__flatbuffers_build_table_field(5, flatbuffers_, Hermes_Job_job_udp_ports, Hermes_Job_Portlist, Hermes_Job_job)

static inline Hermes_Job_job_ref_t Hermes_Job_job_create(flatbuffers_builder_t *B __Hermes_Job_job_formal_args)
{
    if (Hermes_Job_job_start(B)
        || Hermes_Job_job_ops_add(B, v0)
        || Hermes_Job_job_targets_add(B, v1)
        || Hermes_Job_job_ports_add(B, v2)
        || Hermes_Job_job_syn_ports_add(B, v3)
        || Hermes_Job_job_ack_ports_add(B, v4)
        || Hermes_Job_job_udp_ports_add(B, v5)) {
        return 0;
    }
    return Hermes_Job_job_end(B);
}

static Hermes_Job_job_ref_t Hermes_Job_job_clone(flatbuffers_builder_t *B, Hermes_Job_job_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Hermes_Job_job_start(B)
        || Hermes_Job_job_ops_pick(B, t)
        || Hermes_Job_job_targets_pick(B, t)
        || Hermes_Job_job_ports_pick(B, t)
        || Hermes_Job_job_syn_ports_pick(B, t)
        || Hermes_Job_job_ack_ports_pick(B, t)
        || Hermes_Job_job_udp_ports_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Hermes_Job_job_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* HERMESFLATSCHEMA_BUILDER_H */
